
@inproceedings{biancolin_fased:_2019,
	address = {Seaside CA USA},
	title = {{FASED}: {FPGA}-{Accelerated} {Simulation} and {Evaluation} of {DRAM}},
	isbn = {9781450361378},
	shorttitle = {{FASED}},
	url = {https://dl.acm.org/doi/10.1145/3289602.3293894},
	doi = {10.1145/3289602.3293894},
	language = {en},
	urldate = {2021-05-18},
	booktitle = {Proceedings of the 2019 {ACM}/{SIGDA} {International} {Symposium} on {Field}-{Programmable} {Gate} {Arrays}},
	publisher = {ACM},
	author = {Biancolin, David and Karandikar, Sagar and Kim, Donggyu and Koenig, Jack and Waterman, Andrew and Bachrach, Jonathan and Asanovic, Krste},
	month = feb,
	year = {2019},
	pages = {330--339},
}

@article{curtsinger_coz:_2018,
	title = {Coz: finding code that counts with causal profiling},
	volume = {61},
	issn = {0001-0782, 1557-7317},
	shorttitle = {Coz},
	url = {https://dl.acm.org/doi/10.1145/3205911},
	doi = {10.1145/3205911},
	abstract = {Improving performance is a central concern for software developers. To locate optimization opportunities, developers rely on software profilers. However, these profilers only report where programs spend their time: optimizing that code may have no impact on performance. Past profilers thus both waste developer time and make it difficult for them to uncover significant optimization opportunities.
            
              This paper introduces
              causal profiling.
              Unlike past profiling approaches, causal profiling indicates exactly where programmers should focus their optimization efforts, and quantifies their potential impact. Causal profiling works by running
              performance experiments
              during program execution. Each experiment calculates the impact of any potential optimization by
              virtually speeding
              up code: inserting pauses that slow down all other code running concurrently. The key insight is that this slowdown has the same
              relative
              effect as running that line faster, thus "virtually" speeding it up.
            
            We present Coz, a causal profiler, which we evaluate on a range of highly-tuned applications such as Memcached, SQLite, and the PARSEC benchmark suite. Coz identifies previously unknown optimization opportunities that are both significant and targeted. Guided by Coz, we improve the performance of Memcached by 9\%, SQLite by 25\%, and accelerate six PARSEC applications by as much as 68\%; in most cases, these optimizations involve modifying under 10 lines of code.},
	language = {en},
	number = {6},
	urldate = {2021-05-18},
	journal = {Communications of the ACM},
	author = {Curtsinger, Charlie and Berger, Emery D.},
	month = may,
	year = {2018},
	pages = {91--99},
}

@inproceedings{kumar_dasx:_2015,
	address = {Newport Beach California USA},
	title = {{DASX}: {Hardware} {Accelerator} for {Software} {Data} {Structures}},
	isbn = {9781450335591},
	shorttitle = {{DASX}},
	url = {https://dl.acm.org/doi/10.1145/2751205.2751231},
	doi = {10.1145/2751205.2751231},
	language = {en},
	urldate = {2021-05-18},
	booktitle = {Proceedings of the 29th {ACM} on {International} {Conference} on {Supercomputing}},
	publisher = {ACM},
	author = {Kumar, Snehasish and Vedula, Naveen and Shriraman, Arrvindh and Srinivasan, Vijayalakshmi},
	month = jun,
	year = {2015},
	pages = {361--372},
}

@inproceedings{kocberber_meet_2013,
	address = {Davis, California},
	title = {Meet the walkers: accelerating index traversals for in-memory databases},
	isbn = {9781450326384},
	shorttitle = {Meet the walkers},
	url = {http://dl.acm.org/citation.cfm?doid=2540708.2540748},
	doi = {10.1145/2540708.2540748},
	language = {en},
	urldate = {2021-05-18},
	booktitle = {Proceedings of the 46th {Annual} {IEEE}/{ACM} {International} {Symposium} on {Microarchitecture} - {MICRO}-46},
	publisher = {ACM Press},
	author = {Kocberber, Onur and Grot, Boris and Picorel, Javier and Falsafi, Babak and Lim, Kevin and Ranganathan, Parthasarathy},
	year = {2013},
	pages = {468--479},
}

@inproceedings{hari_sassifi:_2017,
	address = {Santa Rosa, CA, USA},
	title = {{SASSIFI}: {An} architecture-level fault injection tool for {GPU} application resilience evaluation},
	isbn = {9781538638903},
	shorttitle = {{SASSIFI}},
	url = {http://ieeexplore.ieee.org/document/7975296/},
	doi = {10.1109/ISPASS.2017.7975296},
	urldate = {2021-05-18},
	booktitle = {2017 {IEEE} {International} {Symposium} on {Performance} {Analysis} of {Systems} and {Software} ({ISPASS})},
	publisher = {IEEE},
	author = {Hari, Siva Kumar Sastry and Tsai, Timothy and Stephenson, Mark and Keckler, Stephen W. and Emer, Joel},
	month = apr,
	year = {2017},
	pages = {249--258},
}

@article{aramudhan_watchdog_2018,
	title = {A watchdog approach - name-matching algorithm for big data risk intelligence},
	volume = {10},
	issn = {1755-8050, 1755-8069},
	url = {http://www.inderscience.com/link.php?id=10015173},
	doi = {10.1504/IJDATS.2018.10015173},
	language = {en},
	number = {3},
	urldate = {2021-05-18},
	journal = {International Journal of Data Analysis Techniques and Strategies},
	author = {Aramudhan, M. and Kirubakaran, Anusuya},
	year = {2018},
	pages = {273},
}
